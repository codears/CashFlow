services:
  # Infraestrutura
  test-redis:
    image: redis:7.2-alpine
    container_name: test_redis
    ports:
      - "6380:6379"  # Porta diferente para não conflitar com outras instâncias
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 10s

  test-rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: test_rabbitmq
    ports:
      - "5673:5672"    # Porta AMQP diferente
      - "15673:15672"  # Porta de gerenciamento diferente
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 15s

  test-postgres:
    image: postgres:16-alpine
    container_name: test_postgres
    environment:
      POSTGRES_DB: test_cashierDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Porta diferente
    volumes:
      - test_db_data:/var/lib/postgresql/data
      - ./Infra/Database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 10s

  # Testes de Integração
  integration-tests:
    build:
      context: .
      dockerfile: Tests.Dockerfile
    container_name: integration-tests
    depends_on:
      test-redis:
        condition: service_healthy
      test-rabbitmq:
        condition: service_healthy
      test-postgres:
        condition: service_healthy
    restart: on-failure
    environment:
      - TEST_REDIS_HOST=test-redis
      - TEST_REDIS_PORT=6379
      - TEST_POSTGRES_CONNECTION=Host=test_postgres;Port=5432;Database=test_cashierDb;Username=postgres;Password=postgres
      - TEST_RABBITMQ_HOST=test-rabbitmq
      - TEST_RABBITMQ_PORT=5672
      - TEST_RABBITMQ_USER=guest
      - TEST_RABBITMQ_PASSWORD=guest
    volumes:
      - ./TestResults:/app/TestResults
    command: >
      dotnet test 
      CashFlow.CashierApi.Tests/CashFlow.CashierApi.Tests.csproj 
      --filter "IntegrationTests" 
      --logger "trx;LogFileName=IntegrationTests.trx" 
      --results-directory /app/TestResults

  # Testes de Carga
  load-tests:
    build:
      context: .
      dockerfile: Tests.Dockerfile
    container_name: load_tests
    depends_on:
      cashierapi:
        condition: service_healthy
      cashreportapi:
        condition: service_healthy
    environment:
      - TARGET_CASHIER_API=http://cashierapi:80
      - TARGET_REPORT_API=http://cashreportapi:80
    volumes:
      - ./TestResults:/app/TestResults
    command: >
      dotnet test 
      CashFlow.LoadTests/CashFlow.LoadTests.csproj 
      --logger "trx;LogFileName=LoadTests.trx" 
      --results-directory /app/TestResults

  # Aplicações (versões de teste)
  cashierapi:
    build:
      context: .
      dockerfile: CashierApi/Dockerfile
    container_name: test_cashier_api
    depends_on:
      test-redis:
        condition: service_healthy
      test-rabbitmq:
        condition: service_healthy
      test-postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Test
      - ConnectionStrings__PostgreSql=Host=test_postgres;Port=5432;Database=test_cashierDb;Username=postgres;Password=postgres
      - Redis__Host=test-redis
      - Redis__Port=6379
      - RabbitMq__HostName=test-rabbitmq
      - RabbitMq__Port=5672
      - RabbitMq__UserName=guest
      - RabbitMq__Password=guest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    ports:
      - "5001:80"  # Porta diferente da produção

  cashreportapi:
    build:
      context: .
      dockerfile: CashReportApi/Dockerfile
    container_name: test_cash_report_api
    depends_on:
      test-redis:
        condition: service_healthy
      test-postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Test
      - ConnectionStrings__PostgreSql=Host=test_postgres;Port=5432;Database=test_cashierDb;Username=postgres;Password=postgres
      - Redis__Host=test-redis
      - Redis__Port=6379
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    ports:
      - "5003:80"  # Porta diferente da produção

  cashierworker:
    build:
      context: .
      dockerfile: CashierWorker/Dockerfile
    container_name: test_cashier_worker
    depends_on:
      test-redis:
        condition: service_healthy
      test-rabbitmq:
        condition: service_healthy
    environment:
      - DOTNET_ENVIRONMENT=Test
      - ConnectionStrings__PostgreSql=Host=test_postgres;Port=5432;Database=test_cashierDb;Username=postgres;Password=postgres
      - Redis__Host=test-redis
      - Redis__Port=6379
      - RabbitMqSettings__HostName=test-rabbitmq
      - RabbitMqSettings__Port=5672
      - RabbitMqSettings__UserName=guest
      - RabbitMqSettings__Password=guest

volumes:
  test_db_data:
